<div class="maincontent">

  <article class="article">
    <h1 class="article-title">BitTorrent Protocol Info</h1>
      <p>All info taken from <a href="http://www.bittorrent.org/beps/bep_0003.html">www.bittorrent.org</a></p>
      <p>BitTorrent consists of these things</p>
      <ul>
        <li>An ordinary web server</li>
        <li>A static 'metainfo' file or .torrent file</li>
        <li>A BitTorrent tracker</li>
        <li>An 'original' downloader</li>
        <li>The end user web browsers</li>
        <li>The end user downloaders</li>
      </ul>
      <p>The protocol uses something called 'bencoding' to transfer information between trackers and clients.</p>
      <ul>
        <li>Strings are length-prefixed base ten followed by a colon and the string. For example 4:spam corresponds to 'spam'.</li>
        <li>Integers are represented by an 'i' followed by the number in base 10 followed by an 'e'. For example i3e corresponds to 3 and i-3e corresponds to -3. Integers have no size limitation. i-0e is invalid. All encodings with a leading zero, such as i03e, are invalid, other than i0e, which of course corresponds to 0.</li>
        <li>Lists are encoded as an 'l' followed by their elements (also bencoded) followed by an 'e'. For example l4:spam4:eggse corresponds to ['spam', 'eggs'].</li>
        <li>Dictionaries are encoded as a 'd' followed by a list of alternating keys and their corresponding values followed by an 'e'. For example, d3:cow3:moo4:spam4:eggse corresponds to {'cow': 'moo', 'spam': 'eggs'} and d4:spaml1:a1:bee corresponds to {'spam': ['a', 'b']}. Keys must be strings and appear in sorted order (sorted as raw strings, not alphanumerics).</li>
      </ul>
      <p>The metainfo .torrent files contain the 'announce' which is the URL of the tracker and 'info' which maps to a dictionary of keys.</p>
      <p>Tracker GET requests have the following keys:
      <ul>
        <li>info_hash: a sha1 hash of the info value from the .torrent file</li>
        <li>peer_id: A randomly generated id generated by the peer at the start of a new download.</li>
        <li>ip: The ip of the peer.</li>
        <li>port: The port number that the peer is listening on.</li>
        <li>uploaded: The total amount uploaded so far.</li>
        <li>downloaded: The total amount downloaded so far.</li>
        <li>left: The bytes that the peer still needs to download.</li>
        <li>event: An optional key to inform the tracker of peer status.</li>
      </ul>
      <p>Tracker responses are bencoded dictionaries. An example of which is directly below.</p>
      <hr>
      <p>d8:intervali124e12:min intervali30e8:completei1e10:incompletei0e5:peersld2:ip13:73.66.138.2177:peer id20:-qB3370-nbx1_J)9Lp5p4:porti8999eeee</p>
      <hr>
      <p>The above string is decoded as such:<p>
      <ul>
        <li>dictionary {</li>
        <li>{string 'interval', integer '123'},</li>
        <li>{string 'min interval', integer 30'},</li>
        <li>{string 'complete', integer '1'},</li>
        <li>{string 'incomplete', integer '0'},</li>
        <li>{string 'peers', list [dictionary {string 'ip', string '73.66.138.217'},</li>
        <li>{string 'peer id', string ':-qB3370-nbx1_J)9Lp5p'},</li>
        <li>{string 'port', integer '8999'}]}</li>
        <li>}</li>
      </ul>
      <hr>
  </article><!-- article -->

</div>

